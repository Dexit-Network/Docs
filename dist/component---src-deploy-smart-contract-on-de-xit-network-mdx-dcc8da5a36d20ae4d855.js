(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{ZKcl:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return y})),n.d(t,"default",(function(){return O}));var o=n("Fcif"),a=n("+I+c"),r=(n("mXGw"),n("/FXl")),i=n("TjRS"),c=n("+nQv"),l=n.n(c),s=n("9Pt3"),m=n.n(s),u=n("dr+a"),p=n.n(u),d=n("zj0v"),b=n.n(d),f=(n("aD51"),["components"]),y={};void 0!==y&&y&&y===Object(y)&&Object.isExtensible(y)&&!Object.prototype.hasOwnProperty.call(y,"__filemeta")&&Object.defineProperty(y,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/deploy-smart-contract-on-DeXit-network.mdx"}});var w={_frontmatter:y},j=i.a;function O(e){var t=e.components,n=Object(a.a)(e,f);return Object(r.b)(j,Object(o.a)({},w,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"deploy-smart-contract-on-dexit-network"},"Deploy Smart Contract on DeXit Network"),Object(r.b)("p",null,"This documentation demonstrates the deployment of smart contract on DeXit Network, using Solidity. @openzeppelin/contracts is used for the demo Solidity script. Remix, Truffle and Hardhat are included in this documentation, feel free to choose one of them.\nTo Deploys as DRC20 smart contract with front-end. You can interact with the smart contract easily!  This tutorial is intended to be followed using the online IDE available at"),Object(r.b)("p",null,"Remix"),Object(r.b)("p",null,"Setting up Remix IDE for your smart contract\nRemix IDE is an open source web and desktop application. It fosters a fast development cycle and has a rich set of plugins with intuitive GUIs. Remix is used for the entire journey of contract development as well as act as a playground for learning and teaching EVM base blockchain. "),Object(r.b)("img",{src:l.a,alt:"Submenus"}),Object(r.b)("p",null,"In order to deploy smart contract on Remix IDE "),Object(r.b)("p",null,"Modify “name”, “symbol”, “decimals” and “totalSupply” according to your requirements"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"1. Go to File Explorers, And Create a new file, Name it MyToken.sol. \n2. Copy/Paste the Smart contract from sample Contract  into the newly created file MyToken.sol\n3. Make sure you’re compiler version, Language, Optimization \n4. Make sure Name, symbol, Decimal, total supply enter as per your requirement \n5. Once all field completed just choose environment inject web3 and Deploy contract. \n")),Object(r.b)("img",{src:m.a,alt:"Submenus"}),Object(r.b)("img",{src:p.a,alt:"Submenus"}),Object(r.b)("p",null,"Now, We have to deploy our smart contract on DeXit Network. By using web3 environment, wallet used Metamask,\nWe will be using Metamask. Please follow this tutorial to setup a Metamask Account.\nOpen Metamask and select Custom RPC from the networks dropdown Go to setting page"),Object(r.b)("img",{src:b.a,alt:"Submenus"}))}void 0!==O&&O&&O===Object(O)&&Object.isExtensible(O)&&!Object.prototype.hasOwnProperty.call(O,"__filemeta")&&Object.defineProperty(O,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/deploy-smart-contract-on-DeXit-network.mdx"}}),O.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-deploy-smart-contract-on-de-xit-network-mdx-dcc8da5a36d20ae4d855.js.map