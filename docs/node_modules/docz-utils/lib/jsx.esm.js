import '@babel/parser';
import '@babel/traverse';
import { valueFromTraverse } from './ast.esm.js';
import { getPropValue, getProp } from 'jsx-ast-utils';
import strip from 'strip-indent';
import escapeJS from 'js-string-escape';

const propFromElement = prop => valueFromTraverse(p => p.isJSXOpeningElement(), p => getPropValue(getProp(p.node.attributes, prop)));
const getTagContentsRange = valueFromTraverse(p => p.isJSXElement(), ({
  node
}) => {
  if (!node.closingElement) {
    // if the JSX element doesn't have a closingElement, it's because it's self-closed
    // and thus does not have any content: <Playground />
    return null;
  }

  return [node.openingElement.end, node.closingElement.start];
});
const removeTags = code => {
  const [start, end] = getTagContentsRange(code) || [0, 0];
  return code.slice(start, end);
};
const sanitizeCode = code => {
  const trimmed = strip(code).trim();
  const newCode = trimmed.startsWith('{') && trimmed.endsWith('}') ? trimmed.substr(1, trimmed.length - 2).trim() : trimmed;
  return escapeJS(strip(newCode));
};
const componentName = value => {
  const match = value.match(/^\<\\?(\w+)/);
  return match && match[1];
};

export { componentName, propFromElement, removeTags, sanitizeCode };
