'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('@babel/parser');
require('@babel/traverse');
var ast = require('./ast.js');
var jsxUtils = require('jsx-ast-utils');
var strip = _interopDefault(require('strip-indent'));
var escapeJS = _interopDefault(require('js-string-escape'));

const propFromElement = prop => ast.valueFromTraverse(p => p.isJSXOpeningElement(), p => jsxUtils.getPropValue(jsxUtils.getProp(p.node.attributes, prop)));
const getTagContentsRange = ast.valueFromTraverse(p => p.isJSXElement(), ({
  node
}) => {
  if (!node.closingElement) {
    // if the JSX element doesn't have a closingElement, it's because it's self-closed
    // and thus does not have any content: <Playground />
    return null;
  }

  return [node.openingElement.end, node.closingElement.start];
});
const removeTags = code => {
  const [start, end] = getTagContentsRange(code) || [0, 0];
  return code.slice(start, end);
};
const sanitizeCode = code => {
  const trimmed = strip(code).trim();
  const newCode = trimmed.startsWith('{') && trimmed.endsWith('}') ? trimmed.substr(1, trimmed.length - 2).trim() : trimmed;
  return escapeJS(strip(newCode));
};
const componentName = value => {
  const match = value.match(/^\<\\?(\w+)/);
  return match && match[1];
};

exports.componentName = componentName;
exports.propFromElement = propFromElement;
exports.removeTags = removeTags;
exports.sanitizeCode = sanitizeCode;
