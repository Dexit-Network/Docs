{"expireTime":9007200901046826000,"key":"gatsby-plugin-mdx-entire-payload-3d7b96e1f6b77c94e013463c219c90e1-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/home/benekiva/Desktop/Block-Chain/Dexit Final Github/Docs/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":142,"offset":143},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":145},"end":{"line":5,"column":29,"offset":173},"indent":[]}},{"type":"import","value":"import remixIDEPic from '../public/assets/remix-ide.png';\nimport solidityCompilerPic from '../public/assets/solidity-compiler.png';\nimport ideWithMetamaskPic from '../public/assets/ide-with-metamask.png';\nimport tokenIDEPic from '../public/assets/token-ide.png';","position":{"start":{"line":9,"column":1,"offset":177},"end":{"line":12,"column":58,"offset":439},"indent":[1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Deploy Smart Contract on DeXit Network","position":{"start":{"line":14,"column":3,"offset":443},"end":{"line":14,"column":41,"offset":481},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":441},"end":{"line":14,"column":41,"offset":481},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This documentation demonstrates the deployment of smart contract on DeXit Network, using Solidity. @openzeppelin/contracts is used for the demo Solidity script. Remix, Truffle and Hardhat are included in this documentation, feel free to choose one of them.\nTo Deploys as DRC20 smart contract with front-end. You can interact with the smart contract easily!  This tutorial is intended to be followed using the online IDE available at","position":{"start":{"line":16,"column":1,"offset":483},"end":{"line":17,"column":176,"offset":915},"indent":[1]}}],"position":{"start":{"line":16,"column":1,"offset":483},"end":{"line":17,"column":176,"offset":915},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Remix","position":{"start":{"line":19,"column":1,"offset":917},"end":{"line":19,"column":6,"offset":922},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":917},"end":{"line":19,"column":6,"offset":922},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Setting up Remix IDE for your smart contract\nRemix IDE is an open source web and desktop application. It fosters a fast development cycle and has a rich set of plugins with intuitive GUIs. Remix is used for the entire journey of contract development as well as act as a playground for learning and teaching EVM base blockchain. ","position":{"start":{"line":21,"column":1,"offset":924},"end":{"line":22,"column":284,"offset":1252},"indent":[1]}}],"position":{"start":{"line":21,"column":1,"offset":924},"end":{"line":22,"column":284,"offset":1252},"indent":[1]}},{"type":"jsx","value":"<img src={remixIDEPic} alt=\"Submenus\" />","position":{"start":{"line":25,"column":1,"offset":1255},"end":{"line":25,"column":41,"offset":1295},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In order to deploy smart contract on Remix IDE ","position":{"start":{"line":27,"column":1,"offset":1297},"end":{"line":27,"column":48,"offset":1344},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1297},"end":{"line":27,"column":48,"offset":1344},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Modify “name”, “symbol”, “decimals” and “totalSupply” according to your requirements","position":{"start":{"line":29,"column":1,"offset":1346},"end":{"line":29,"column":85,"offset":1430},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1346},"end":{"line":29,"column":85,"offset":1430},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"1. Go to File Explorers, And Create a new file, Name it MyToken.sol. \n2. Copy/Paste the Smart contract from sample Contract  into the newly created file MyToken.sol\n3. Make sure you’re compiler version, Language, Optimization \n4. Make sure Name, symbol, Decimal, total supply enter as per your requirement \n5. Once all field completed just choose environment inject web3 and Deploy contract. ","position":{"start":{"line":31,"column":1,"offset":1432},"end":{"line":35,"column":90,"offset":1844},"indent":[1,1,1,1]}},{"type":"jsx","value":"<img src={solidityCompilerPic} alt=\"Submenus\" />","position":{"start":{"line":37,"column":1,"offset":1846},"end":{"line":37,"column":49,"offset":1894},"indent":[]}},{"type":"jsx","value":"<img src={ideWithMetamaskPic} alt=\"Submenus\" />","position":{"start":{"line":39,"column":1,"offset":1896},"end":{"line":39,"column":48,"offset":1943},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now, We have to deploy our smart contract on DeXit Network. By using web3 environment, wallet used Metamask,\n We will be using Metamask. Please follow this tutorial to setup a Metamask Account. \n Open Metamask and select Custom RPC from the networks dropdown Go to setting page","position":{"start":{"line":41,"column":1,"offset":1945},"end":{"line":43,"column":83,"offset":2222},"indent":[1,1]}}],"position":{"start":{"line":41,"column":1,"offset":1945},"end":{"line":43,"column":83,"offset":2222},"indent":[1,1]}},{"type":"jsx","value":"<img src={tokenIDEPic} alt=\"Submenus\" />","position":{"start":{"line":45,"column":1,"offset":2224},"end":{"line":45,"column":41,"offset":2264},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":47,"column":1,"offset":2266},"end":{"line":47,"column":31,"offset":2296},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":47,"column":31,"offset":2296}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/benekiva/Desktop/Block-Chain/Dexit Final Github/Docs/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport remixIDEPic from '../public/assets/remix-ide.png';\nimport solidityCompilerPic from '../public/assets/solidity-compiler.png';\nimport ideWithMetamaskPic from '../public/assets/ide-with-metamask.png';\nimport tokenIDEPic from '../public/assets/token-ide.png';\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"deploy-smart-contract-on-dexit-network\"\n    }}>{`Deploy Smart Contract on DeXit Network`}</h1>\n    <p>{`This documentation demonstrates the deployment of smart contract on DeXit Network, using Solidity. @openzeppelin/contracts is used for the demo Solidity script. Remix, Truffle and Hardhat are included in this documentation, feel free to choose one of them.\nTo Deploys as DRC20 smart contract with front-end. You can interact with the smart contract easily!  This tutorial is intended to be followed using the online IDE available at`}</p>\n    <p>{`Remix`}</p>\n    <p>{`Setting up Remix IDE for your smart contract\nRemix IDE is an open source web and desktop application. It fosters a fast development cycle and has a rich set of plugins with intuitive GUIs. Remix is used for the entire journey of contract development as well as act as a playground for learning and teaching EVM base blockchain. `}</p>\n    <img src={remixIDEPic} alt=\"Submenus\" />\n    <p>{`In order to deploy smart contract on Remix IDE `}</p>\n    <p>{`Modify “name”, “symbol”, “decimals” and “totalSupply” according to your requirements`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`1. Go to File Explorers, And Create a new file, Name it MyToken.sol. \n2. Copy/Paste the Smart contract from sample Contract  into the newly created file MyToken.sol\n3. Make sure you’re compiler version, Language, Optimization \n4. Make sure Name, symbol, Decimal, total supply enter as per your requirement \n5. Once all field completed just choose environment inject web3 and Deploy contract. \n`}</code></pre>\n    <img src={solidityCompilerPic} alt=\"Submenus\" />\n    <img src={ideWithMetamaskPic} alt=\"Submenus\" />\n    <p>{`Now, We have to deploy our smart contract on DeXit Network. By using web3 environment, wallet used Metamask,\nWe will be using Metamask. Please follow this tutorial to setup a Metamask Account.\nOpen Metamask and select Custom RPC from the networks dropdown Go to setting page`}</p>\n    <img src={tokenIDEPic} alt=\"Submenus\" />\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}